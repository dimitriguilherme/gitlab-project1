# workflow:
#   rules:
# #if branch is not master
#     - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       when: never
#     - when: always

stages:
  - test
  - build
  - deploy

#test
run_unit_test:
  image: node:17-alpine3.14
  # - tags:
  #   - runners?
  #   - runner2?
  # only:
  #   - master
  stage: test
  before_script:
    # - echo "preparando testes for $MICRO_SERVICE_NAME"
    # - pwd
    # - ls
    # - mkdir test-data
    # - ls
    - cd app
    - npm install
  script:
    - echo "run teste"
    - npm test
  artifacts:
    when: always
    reports:
      junit: app/junit.xml
  after_script:
    - echo "clean"
    

# run_lint_tests:
#   # only:
#   #   - test
#   stage: test
#   before_script:
#     - echo "preparing test"
#   script:  
#     - echo "running"
#   after_script:
#     - echo "clearing test"

build_image:
  image: gitlab/dind
  services:
    - docker:dind
  # - tags:
  #   - runners?
  #   - runner2?
  # only:
  #   - master
  stage: build
  script:
    - echo "buil the image"
    - docker build -t $CI_REGISTRY_IMAGE:1.0 .



push_image:
  image: gitlab/dind
  services:
    - docker:dind
  # - tags:
  #   - runners?
  #   - runner2?
  # only:
  #   - master
#   # only:
#   #   - master
  stage: build
  needs:
    - build_image 
  before_script:
    - echo "docker registry is $CI_REGISTRY"
    - echo "docker username is $CI_REGISTRY_USER"
    - echo "docker image repo is $CI_REGISTRY_IMAGE"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "docker push"
    - docker push $CI_REGISTRY_IMAGE:1.0


# deploy_image:
#   # only:
#   #   - master2
#   stage: deploy
#   script:
#     - echo "loog docker regs TO $DEPLOYMENT_ENVIRONMENT  using $PROPERTIES_FILE"
#     - echo "Push docker image"

